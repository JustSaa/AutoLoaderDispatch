package ru.autoloader.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.autoloader.exception.RequestNotFoundException;
import ru.autoloader.model.*;
import ru.autoloader.repository.LoaderRepository;
import ru.autoloader.repository.RequestRepository;

import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class RequestService {

    private final RequestRepository requestRepository;
    private final LoaderRepository loaderRepository;

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏
    public List<Request> getAllRequests() {
        log.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫");
        return requestRepository.findAll();
    }

    // –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É –ø–æ ID
    public Request getRequestById(Long id) {
        log.info("–ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –ø–æ ID: {}", id);
        return requestRepository.findById(id)
                .orElseThrow(() -> {
                    log.warn("–ó–∞—è–≤–∫–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", id);
                    return new RequestNotFoundException("Request with id " + id + " not found");
                });
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    public Request createRequest(Request request) {
        log.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏: {}", request);
        request.setStatus(RequestStatus.NEW);

        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∑—á–∏–∫–∞
        log.info("–ü–æ–∏—Å–∫ –ø–æ–≥—Ä—É–∑—á–∏–∫–∞ –¥–ª—è —Å–∫–∞–ª–∞–¥–∞: {}", request.getWarehouse());
        Loader bestLoader = findBestAvailableLoader(request.getWarehouse());

        if (bestLoader != null) {
            log.info("–ü–æ–≥—Ä—É–∑—á–∏–∫ –Ω–∞–π–¥–µ–Ω: {}", bestLoader);
            request.setLoader(bestLoader);
            bestLoader.setStatus(LoaderStatus.BUSY); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–≥—Ä—É–∑—á–∏–∫–∞
            loaderRepository.save(bestLoader); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        }

        return requestRepository.save(request);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
    public Request updateRequestStatus(Long id, RequestStatus status) {
        log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ ID {} -> {}", id, status);
        Request request = requestRepository.findById(id)
                .orElseThrow(() -> {
                    log.error("–û—à–∏–±–∫–∞! –ó–∞—è–≤–∫–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id);
                    return new RequestNotFoundException("Request not found with id: " + id);
                });

        request.setStatus(status);

        // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É –ø–æ–≥—Ä—É–∑—á–∏–∫–∞
        if (status == RequestStatus.DONE && request.getLoader() != null) {
            Loader loader = request.getLoader();
            loader.setLastCompletedAt(LocalDateTime.now());
            loader.setStatus(LoaderStatus.IDLE); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–≥—Ä—É–∑—á–∏–∫
            loaderRepository.save(loader);
        }

        return requestRepository.save(request);
    }

    public void deleteRequest(Long id) {
        log.info("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ID: {}", id);
        if (!requestRepository.existsById(id)) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É ID: {}", id);
            throw new RequestNotFoundException("Request with id " + id + " not found");
        }
        requestRepository.deleteById(id);
    }

    private Loader findBestAvailableLoader(Warehouse warehouse) {
        return loaderRepository.findAll().stream()
                .filter(loader -> {
                    boolean isIdle = loader.getStatus() == LoaderStatus.IDLE;
                    if (!isIdle) {
                        log.debug("‚è≠Ô∏è –ü–æ–≥—Ä—É–∑—á–∏–∫ {} ({}) –ø—Ä–æ–ø—É—â–µ–Ω, —Å—Ç–∞—Ç—É—Å: {}", loader.getId(), loader.getName(), loader.getStatus());
                    }
                    return isIdle;
                })
                .peek(loader -> log.debug("üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–≥—Ä—É–∑—á–∏–∫–∞ {} ({}) –¥–æ —Å–∫–ª–∞–¥–∞: {} –º",
                        loader.getId(), loader.getName(), getDistance(loader, warehouse)))
                .sorted(Comparator
                        .comparing((Loader l) -> getDistance(l, warehouse)) // 1. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                        .thenComparing(l -> l.getLastCompletedAt() != null ? l.getLastCompletedAt() : LocalDateTime.MIN) // 2. –ü–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                )
                .peek(loader -> log.info("‚úÖ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {} ({}) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {} –º, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {}",
                        loader.getId(), loader.getName(), getDistance(loader, warehouse),
                        loader.getLastCompletedAt() != null ? loader.getLastCompletedAt() : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"))
                .findFirst()
                .orElse(null);
    }

    private double getDistance(Loader loader, Warehouse warehouse) {
        double dx = loader.getLatitude() - warehouse.getLatitude();
        double dy = loader.getLongitude() - warehouse.getLongitude();
        double distance = Math.sqrt(dx * dx + dy * dy);
        log.debug("–í—ã—á–∏—Å–ª–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {} –º –º–µ–∂–¥—É –ø–æ–≥—Ä—É–∑—á–∏–∫–æ–º {} –∏ —Å–∫–ª–∞–¥–æ–º {}", distance, loader.getId(), warehouse.getId());
        return distance;
    }
}